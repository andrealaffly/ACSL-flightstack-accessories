function controller_matrices = initializeProjectionEllipsoidParams_MRAC(gains, controller_matrices)
%INITIALIZEPROJECTIONELLIPSOIDPARAMS
% Generate the matrix S from the ellipsoid semi-axis length terms contained in
% the column vector S_diagonal and 
% Compute the epsilon parameter from the scaling coefficient alpha.


controller_matrices.S_x_translational = ...
  generateEllipsoidMatrixFromDiagonal(gains.ADAPTIVE.S_diagonal_x_translational);
controller_matrices.S_r_translational = ...
  generateEllipsoidMatrixFromDiagonal(gains.ADAPTIVE.S_diagonal_r_translational);
controller_matrices.S_Theta_translational = ...
  generateEllipsoidMatrixFromDiagonal(gains.ADAPTIVE.S_diagonal_Theta_translational);

controller_matrices.S_x_rotational = ...
  generateEllipsoidMatrixFromDiagonal(gains.ADAPTIVE.S_diagonal_x_rotational);
controller_matrices.S_r_rotational = ...
  generateEllipsoidMatrixFromDiagonal(gains.ADAPTIVE.S_diagonal_r_rotational);
controller_matrices.S_Theta_rotational = ...
  generateEllipsoidMatrixFromDiagonal(gains.ADAPTIVE.S_diagonal_Theta_rotational);

controller_matrices.epsilon_x_translational = ...
  computeEpsilonFromAlpha(gains.ADAPTIVE.alpha_x_translational);
controller_matrices.epsilon_r_translational = ...
  computeEpsilonFromAlpha(gains.ADAPTIVE.alpha_r_translational);
controller_matrices.epsilon_Theta_translational = ...
  computeEpsilonFromAlpha(gains.ADAPTIVE.alpha_Theta_translational);

controller_matrices.epsilon_x_rotational = ...
  computeEpsilonFromAlpha(gains.ADAPTIVE.alpha_x_rotational);
controller_matrices.epsilon_r_rotational = ...
  computeEpsilonFromAlpha(gains.ADAPTIVE.alpha_r_rotational);
controller_matrices.epsilon_Theta_rotational = ...
  computeEpsilonFromAlpha(gains.ADAPTIVE.alpha_Theta_rotational);

end

